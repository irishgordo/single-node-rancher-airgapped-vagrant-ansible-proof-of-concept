- hosts: all
  become: yes
  tasks:
    - name: grab base packages for vagrant rancher single node
      apt:
        pkg:
          - vim
          - ca-certificates
          - curl 
          - gnupg
          - lsb-release
          - wget
          - openssl
        state: present
        update_cache: yes
      register: apt_init_result
    
    - debug: var=apt_init_result.stdout_lines
    
    - name: run curl to snag docker linux ubuntu gpg
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      register: result_of_curl_snag_gpg_docker
    
    - debug: var=result_of_curl_snag_gpg_docker.stdout_lines
    
    - name: add docker to apt sources lists 
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      register: result_of_apt_sources_list_docker_add
    
    - debug: var=result_of_apt_sources_list_docker_add.stdout_lines

    - name: install docker
      apt:
        pkg: 
          - docker-ce 
          - docker-ce-cli 
          - containerd.io 
        state: present
        update_cache: yes
      register: apt_install_docker_deps
    
    - debug: var=apt_install_docker_deps.stdout_lines

    - name: add vagrant to docker
      shell: |
        usermod -aG docker vagrant 
      register: result_docker_group_add_user_mod
    
    - debug: var=result_docker_group_add_user_mod.stdout_lines

    - name: get helm key 
      shell: |
        curl https://baltocdn.com/helm/signing.asc | apt-key add -
      register: helm_key_result
    
    - debug: var=helm_key_result.stdout_lines

    - name: snag apt transport https 
      apt:
        pkg: 
          - apt-transport-https
        state: present
        update_cache: yes 
      register: apt_transport_https_pkg_result

    - debug: var=apt_transport_https_pkg_result.stdout_lines

    - name: modify helm ubuntu srcs 
      shell: |
        echo "deb https://baltocdn.com/helm/stable/debian/ all main" | tee /etc/apt/sources.list.d/helm-stable-debian.list
      register: modify_helm_ubuntu_srcs_result
    
    - debug: var=modify_helm_ubuntu_srcs_result.stdout_lines 

    - name: install helm
      apt:
        pkg:
          - helm
        state: present
        update_cache: yes
      register: acquire_helm_pkg_status
    
    - debug: var=acquire_helm_pkg_status.stdout_lines

    - name: create certs dir
      file:
        path: /home/vagrant/certs 
        state: directory
    
    - name: create registry dir
      file:
        path: /home/vagrant/registry 
        state: directory

    - name: build openssl registry certs task
      command: openssl req -newkey rsa:4096 -nodes -sha256 -keyout /home/vagrant/certs/domain.key -addext "subjectAltName = DNS:myregistry.local" -subj '/CN=www.mydom.com/O=My Company Name LTD./C=US' -x509 -days 365 -out /home/vagrant/certs/domain.crt
      register: result_openssl_docker_reg_certs

    - debug: var=result_openssl_docker_reg_certs.stdout_lines

    - name: create certs docker dir
      file:
        path: /etc/docker/certs.d/myregistry.local:5000
        state: directory
      register: result_docker_certs_dir
    
    - debug: var=result_docker_certs_dir.stdout_lines 

    - name: move certs
      command: cp -v /home/vagrant/certs/domain.crt /etc/docker/certs.d/myregistry.local:5000/domain.crt
      register: certs_moved_result
    
    - debug: var=certs_moved_result.stdout_lines
    
    - name: start docker registry 
      command: docker run -d \
        -p 5000:5000 \
        --restart=always \
        --name registry \
        -v /home/vagrant/certs:/certs \
        -v /home/vagrant/registry:/var/lib/registry \
        -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \
        -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \
        registry:2
      register: docker_start_info
    
    - debug: var=docker_start_info.stdout_lines

    - name: snag ip from eth0 
      shell: |
        ip a s eth0 | egrep -o 'inet [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | cut -d ' ' -f2
      register: private_ip
    
    - debug: var=private_ip.stdout_lines
    
    - name: modify /etc/hosts
      shell: |
        echo "" >> /etc/hosts && echo "{{ private_ip.stdout }} myregistry.local" >> /etc/hosts && cat /etc/hosts
      register: modified_etc_hosts
    
    - debug: var=modified_etc_hosts.stdout_lines
    
    - name: copy get-rancher-scripts over
      copy:
        src: roles/rancher/files/get-rancher-scripts.sh
        dest: /home/vagrant/
      register: copy_rancher_script_status
    
    - debug: var=copy_rancher_script_status.stdout_lines

    - name: make rancher scripts executable
      file: 
        dest: /home/vagrant/get-rancher-scripts.sh
        mode: a+x
      register: rancher_scripts_executable_adj_result
    
    - debug: var=rancher_scripts_executable_adj_result.stdout_lines

    - name: run rancher script of getting images 
      shell: |
        cd /home/vagrant && ./get-rancher-scripts.sh v2.6.4-rc13 && ls -alh /home/vagrant 
      register: result_images
    
    - debug: var=result_images.stdout_lines

    - name: make executable script rancher save images
      file: 
        dest: /home/vagrant/rancher-save-images.sh
        mode: a+x
      register: result_save_image_script_executable
    
    - debug: var=result_save_image_script_executable.stdout_lines
    
    - name: make executable script rancher load images
      file:
        dest: /home/vagrant/rancher-load-images.sh
        mode: a+x
      register: result_load_images_script_executable
    
    - debug: var=result_load_images_script_executable.stdout_lines


  roles:
    - rancher

